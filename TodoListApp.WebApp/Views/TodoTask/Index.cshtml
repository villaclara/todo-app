@using TodoListApp.Common.Models.Sorting;
@model TodoTaskIndexViewModel

<div class="container d-flex justify-content-between align-items-center mt-3">
    <h5 class="mb-0">My Assigned Tasks</h5>

    <form asp-controller="TodoTask" asp-action="Index" method="get" class="d-flex">
        <select name="sorting" class="form-select form-select-sm w-auto" onchange="this.form.submit()">
            <option disabled selected>Sort by...</option>
            <option value="CreatedDateDesc" selected="@(Model.Sorting == TaskSortingValue.CreatedDateDesc)">Created Date ↓</option>
            <option value="CreatedDateAsc" selected="@(Model.Sorting == TaskSortingValue.CreatedDateAsc)">Created Date ↑</option>
            <option value="TodoListNameAsc" selected="@(Model.Sorting == TaskSortingValue.TodoListNameAsc)">List Name ↑</option>
            <option value="TodoListNameDesc" selected="@(Model.Sorting == TaskSortingValue.TodoListNameDesc)">List Name ↓</option>
            <option value="TaskStatusAsc" selected="@(Model.Sorting == TaskSortingValue.TaskStatusAsc)">Status ↑</option>
            <option value="TaskStatusDesc" selected="@(Model.Sorting == TaskSortingValue.TaskStatusDesc)">Status ↓</option>
            <option value="DueDateAsc" selected="@(Model.Sorting == TaskSortingValue.DueDateAsc)">Due Date ↑</option>
            <option value="DueDateDesc" selected="@(Model.Sorting == TaskSortingValue.DueDateDesc)">Due Date ↓</option>
        </select>
    </form>
</div>

@foreach (var group in Model.TodoTasks.GroupBy(t => t.TodoListName))
{
    <div class="m-md-3 mt-4">
        <h6 class="text-primary border-bottom pb-1 mb-2">
            <i class="bi bi-list-task me-1"></i> @group.Key
        </h6>

        <ul class="list-group">
            @foreach (var task in group)
            {
                <a asp-controller="TodoTask" asp-action="Details" asp-route-listId="@task.Id"
                   class="list-group-item list-group-item-action d-flex justify-content-between align-items-center shadow-sm mb-2 rounded
                            @(task.IsOverdue && task.Status != TodoTaskStatus.Completed ? "task-overdue !important" : "") ">
                    <!-- Left side: main info -->
                    <div class="flex-grow-1 me-md-3">
                        <div class="d-flex align-items-center mb-1">
                            <strong class="me-2">@task.Title</strong>
                            <span class="badge
                                        @(task.Status == TodoTaskStatus.Completed ? "bg-success" :
                                            task.Status == TodoTaskStatus.InProgress ? "bg-primary" : "bg-secondary")">
                                @task.Status
                            </span>
                            @if (task.IsOverdue && task.Status != TodoTaskStatus.Completed)
                            {
                                <span class="badge bg-danger ms-1">Overdue</span>
                            }
                        </div>

                        <small class="text-muted d-block">
                            <i class="bi bi-calendar-event me-1"></i> <strong>Created:</strong>
                            @(task.CreatedAtDate == default ? "No due date" : task.CreatedAtDate.ToString("MMM dd"))
                            &nbsp;|&nbsp;
                            <i class="bi bi-calendar-event me-1"></i> <strong>Due:</strong>
                            @(task.DueToDate == default ? "No due date" : task.DueToDate.ToString("MMM dd"))
                        </small>
                    </div>

                    <!-- Right side: actions -->
                    <div class="mt-2 mt-md-0 text-nowrap">
                        <span class="chevron">&#8250;</span>
                    </div>
                </a>
            }
        </ul>
    </div>
}

@if (Model.TotalPages > 1)
{
    <nav aria-label="Todo tasks pagination" class="mt-3">
        <ul class="pagination pagination-sm justify-content-center flex-wrap">
            <li class="page-item @(Model.HasPrevious ? "" : "disabled")">
                <a class="page-link"
                   asp-controller="TodoTask"
                   asp-action="Index"
                   asp-route-pageNumber="@(Model.CurrentPage - 1)"
                   asp-route-pageSize="@Model.PageSize"
                   asp-route-sorting="@Model.Sorting">
                    « Prev
                </a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link"
                       asp-controller="TodoTask"
                       asp-action="Index"
                       asp-route-pageNumber="@i"
                       asp-route-pageSize="@Model.PageSize"
                       asp-route-sorting="@Model.Sorting">
                        @i
                    </a>
                </li>
            }
            <li class="page-item @(Model.HasNext ? "" : "disabled")">
                <a class="page-link"
                   asp-controller="TodoTask"
                   asp-action="Index"
                   asp-route-pageNumber="@(Model.CurrentPage + 1)"
                   asp-route-pageSize="@Model.PageSize"
                   asp-route-sorting="@Model.Sorting">
                    Next »
                </a>
            </li>
        </ul>
        <div class="text-center text-muted small">
            Page @Model.CurrentPage of @Model.TotalPages (Total: @Model.TotalCount)
        </div>
    </nav>
}


<style>
    .list-group-item-action:hover {
        transform: translateY(-2px);
        transition: transform 0.2s;
    }

    .list-group-item {
        border: 1px solid #dee2e6 !important; /* Bootstrap default gray */
    }

    .task-overdue {
        border-left: 3px solid #dc3545 !important; /* Bootstrap danger red */
    }

    .chevron {
        font-size: 1.5rem;
        color: #6c757d; /* muted gray */
        transition: transform 0.2s;
    }
</style>